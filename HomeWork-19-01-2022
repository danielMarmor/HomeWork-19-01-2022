--# 1
CREATE OR REPLACE FUNCTION public.sp_get_calc(
	num1 double precision,
	num2 double precision,
	expression text)
    RETURNS double precision
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
		declare result double precision := 0;
		begin 		
			if expression = '+' then
				return num1 + num2;
			elseif expression = '-' then
				return num1 - num2;
			elseif expression = '*' then
				return num1 * num2;
			elseif expression = '/' then
				begin
					if num2 = 0 then
						raise exception 'Cannot Divide by zero!';
					end if;
					return num1 / num2;	
				end;
			elseif expression = '^' then
				return pow(num1, num2);
			else
				begin
					if num2 = 0 then
						raise exception 'Cannot Root by zero!';
					end if;
					return pow(num1, (1/num2));	
				end;
			   
			end if;
		end;
	
$BODY$;

ALTER FUNCTION public.sp_get_calc(double precision, double precision, text)
    OWNER TO postgres;


select * from sp_get_calc(3, 0, '/')



--# 2
-- FUNCTION: public.sp_get_calc_case(double precision, double precision, text)

-- DROP FUNCTION IF EXISTS public.sp_get_calc_case(double precision, double precision, text);

CREATE OR REPLACE FUNCTION public.sp_get_calc_case(
	num1 double precision,
	num2 double precision,
	expression text)
    RETURNS double precision
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
		begin
		return (case when expression = '+' then num1 +num2
			   		 when expression = '-' then num1 -num2
					 when expression = '*' then num1 *num2
					 when expression = '/' then num1 /num2
				     when expression = '^' then pow(num1, num2)
					 else pow(num1 , 1/num2) end);
			   
		end;
	
$BODY$;

ALTER FUNCTION public.sp_get_calc_case(double precision, double precision, text)
    OWNER TO postgres;
	
select * from sp_get_calc_case(3, 4, '!')

--# 3
drop PROCEDURE public.sp_delete_movies_if_exists;
CREATE OR REPLACE PROCEDURE public.sp_delete_movies_if_exists(
	_movie_id bigint)
    LANGUAGE 'plpgsql'
AS $$
		declare movie_exsists boolean = 0;
		begin
			select 1 into movie_exsists
			from movies mv
			where mv.id =_movie_id;
			if not found then
				raise NOTICE 'No Movie Found!';
			else
				begin
					delete from movies mv
					where mv.id =_movie_id;		
	  		    	raise NOTICE 'Commited!';
				end;
			end if;		
			   
		end;
	
$$;

call sp_delete_movies_if_exists(5);

-- # 4

CREATE or replace function sp_populate_grades()
returns TABLE(class_id bigint, student_id bigint, grade double precision, min_grade double precision, different double precision)
language plpgsql AS
    $$
		begin
			return QUERY
			select 
			grd.class_id class_id,
			grd.student_id student_id,
			grd.grade grade,
			min(grd.grade) over(partition by grd.class_id) min_grade,
			grd.grade -(min(grd.grade) over(partition by grd.class_id)) different  
			from grades grd
			order by grd.class_id asc,
			grd.student_id asc;
		end;
	$$;
	
select * from sp_populate_grades()

-- # 5
CREATE OR REPLACE FUNCTION public.sp_populate(
	_amount_to_lottery bigint)
returns bigint

language plpgsql as 
$$
	declare counter int := 0;
	declare current_draw int := 0;
	begin	
		for i in 1.._amount_to_lottery
			loop	
				current_draw := round(random() * 10);
				insert into lottery(id, lottery_number)
				values (i, current_draw);		
				counter := counter +1;	
			end loop;
	return counter;
	end;
$$;

select * from sp_populate(50);
